
UART_HC05_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d76  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092d  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061a  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f8  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047c  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  58:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  5c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  60:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  68:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  6c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  70:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a0 30       	cpi	r26, 0x00	; 0
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
  94:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <DIO_SetPinDirection>:
		case DIO_PORTC :
		*Val = GET_BIT(PINC,Pin);
		break;
		
		case DIO_PORTD :
		*Val = GET_BIT(PIND,Pin);
  9c:	44 23       	and	r20, r20
  9e:	b9 f1       	breq	.+110    	; 0x10e <DIO_SetPinDirection+0x72>
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_SetPinDirection+0xa>
  a4:	6b c0       	rjmp	.+214    	; 0x17c <DIO_SetPinDirection+0xe0>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	89 f0       	breq	.+34     	; 0xcc <DIO_SetPinDirection+0x30>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <DIO_SetPinDirection+0x1a>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	c9 f0       	breq	.+50     	; 0xe2 <DIO_SetPinDirection+0x46>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	11 f1       	breq	.+68     	; 0xf8 <DIO_SetPinDirection+0x5c>
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPinDirection+0x26>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPinDirection+0x22>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDirection+0x3c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDirection+0x38>
  dc:	82 2b       	or	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDirection+0x52>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDirection+0x4e>
  f2:	82 2b       	or	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDirection+0x68>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDirection+0x64>
 108:	82 2b       	or	r24, r18
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	08 95       	ret
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <DIO_SetPinDirection+0x9a>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_SetPinDirection+0x82>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <DIO_SetPinDirection+0xb2>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <DIO_SetPinDirection+0xca>
 11c:	08 95       	ret
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x8e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x8a>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0xa6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0xa2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xbe>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xba>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDirection+0xd6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDirection+0xd2>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_SetPinValue>:
 17e:	44 23       	and	r20, r20
 180:	b9 f1       	breq	.+110    	; 0x1f0 <DIO_SetPinValue+0x72>
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <DIO_SetPinValue+0xa>
 186:	6b c0       	rjmp	.+214    	; 0x25e <DIO_SetPinValue+0xe0>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	89 f0       	breq	.+34     	; 0x1ae <DIO_SetPinValue+0x30>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_SetPinValue+0x1a>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	c9 f0       	breq	.+50     	; 0x1c4 <DIO_SetPinValue+0x46>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	11 f1       	breq	.+68     	; 0x1da <DIO_SetPinValue+0x5c>
 196:	08 95       	ret
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinValue+0x26>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinValue+0x22>
 1a8:	82 2b       	or	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinValue+0x3c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinValue+0x38>
 1be:	82 2b       	or	r24, r18
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	08 95       	ret
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_SetPinValue+0x52>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_SetPinValue+0x4e>
 1d4:	82 2b       	or	r24, r18
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	08 95       	ret
 1da:	22 b3       	in	r18, 0x12	; 18
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPinValue+0x68>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPinValue+0x64>
 1ea:	82 2b       	or	r24, r18
 1ec:	82 bb       	out	0x12, r24	; 18
 1ee:	08 95       	ret
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 f0       	breq	.+36     	; 0x218 <DIO_SetPinValue+0x9a>
 1f4:	28 f0       	brcs	.+10     	; 0x200 <DIO_SetPinValue+0x82>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	d9 f0       	breq	.+54     	; 0x230 <DIO_SetPinValue+0xb2>
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	29 f1       	breq	.+74     	; 0x248 <DIO_SetPinValue+0xca>
 1fe:	08 95       	ret
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0x8e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0x8a>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	8b bb       	out	0x1b, r24	; 27
 216:	08 95       	ret
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xa6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xa2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	08 95       	ret
 230:	25 b3       	in	r18, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPinValue+0xbe>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPinValue+0xba>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	85 bb       	out	0x15, r24	; 21
 246:	08 95       	ret
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPinValue+0xd6>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPinValue+0xd2>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	82 bb       	out	0x12, r24	; 18
 25e:	08 95       	ret

00000260 <DIO_TogglePin>:
		break;
	}
}
void DIO_TogglePin(uint8 Port , uint8 Pin)
{
	switch(Port)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	89 f0       	breq	.+34     	; 0x286 <DIO_TogglePin+0x26>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_TogglePin+0x10>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	c9 f0       	breq	.+50     	; 0x29c <DIO_TogglePin+0x3c>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	11 f1       	breq	.+68     	; 0x2b2 <DIO_TogglePin+0x52>
 26e:	08 95       	ret
	{
		case DIO_PORTA :
		
		toggle_bit(PORTA, Pin);
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_TogglePin+0x1c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_TogglePin+0x18>
 280:	82 27       	eor	r24, r18
 282:	8b bb       	out	0x1b, r24	; 27
		
		break;
 284:	08 95       	ret
		
		case DIO_PORTB :
		
		toggle_bit(PORTB, Pin);
 286:	28 b3       	in	r18, 0x18	; 24
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_TogglePin+0x32>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_TogglePin+0x2e>
 296:	82 27       	eor	r24, r18
 298:	88 bb       	out	0x18, r24	; 24
		
		break;
 29a:	08 95       	ret
		
		case DIO_PORTC :
		
		toggle_bit(PORTC, Pin);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_TogglePin+0x48>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_TogglePin+0x44>
 2ac:	82 27       	eor	r24, r18
 2ae:	85 bb       	out	0x15, r24	; 21
		
		break;
 2b0:	08 95       	ret
		
		case DIO_PORTD :
		
		toggle_bit(PORTD, Pin);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_TogglePin+0x5e>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_TogglePin+0x5a>
 2c2:	82 27       	eor	r24, r18
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	08 95       	ret

000002c8 <LED0_Init>:



void LED0_Init(void)
{
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN2 , DIO_PIN_OUT);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDirection>
 2d2:	08 95       	ret

000002d4 <LED0_ON>:
	
}

void LED0_ON(void)
{
	DIO_SetPinValue(DIO_PORTC, DIO_PIN2 ,  DIO_PIN_HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 2de:	08 95       	ret

000002e0 <LED0_OFF>:
}

void LED0_OFF(void)
{
	DIO_SetPinValue(DIO_PORTC, DIO_PIN2 ,  DIO_PIN_LOW);
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 2ea:	08 95       	ret

000002ec <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	DIO_TogglePin(DIO_PORTC, DIO_PIN2);
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_TogglePin>
 2f4:	08 95       	ret

000002f6 <main>:

int main(void)
{
	uint8 data ; 
	
	LED0_Init();
 2f6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED0_Init>
	UART_Init();
 2fa:	0e 94 90 01 	call	0x320	; 0x320 <UART_Init>
	
	
    /* Replace with your application code */
    while (1) 
    {
		data = UART_Recive_Byte();
 2fe:	0e 94 a3 01 	call	0x346	; 0x346 <UART_Recive_Byte>
		
		if(data == '1')
 302:	81 33       	cpi	r24, 0x31	; 49
 304:	19 f4       	brne	.+6      	; 0x30c <main+0x16>
		{
			LED0_ON();
 306:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED0_ON>
 30a:	f9 cf       	rjmp	.-14     	; 0x2fe <main+0x8>
		}
		else if(data== '2')
 30c:	82 33       	cpi	r24, 0x32	; 50
 30e:	19 f4       	brne	.+6      	; 0x316 <main+0x20>
		{
			LED0_OFF();
 310:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED0_OFF>
 314:	f4 cf       	rjmp	.-24     	; 0x2fe <main+0x8>
		}
		else if(data == '3')
 316:	83 33       	cpi	r24, 0x33	; 51
 318:	91 f7       	brne	.-28     	; 0x2fe <main+0x8>
		{
			LED0_Toggle();
 31a:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED0_Toggle>
 31e:	ef cf       	rjmp	.-34     	; 0x2fe <main+0x8>

00000320 <UART_Init>:
{
	UDR = data ; // write in UDR req 
	
	while(GET_BIT(UCSRA , 5)==0); // while flag not fire stuck here polling method 
	
}
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDirection>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_SetPinDirection>
 334:	8a b1       	in	r24, 0x0a	; 10
 336:	88 61       	ori	r24, 0x18	; 24
 338:	8a b9       	out	0x0a, r24	; 10
 33a:	80 b5       	in	r24, 0x20	; 32
 33c:	86 68       	ori	r24, 0x86	; 134
 33e:	80 bd       	out	0x20, r24	; 32
 340:	87 e6       	ldi	r24, 0x67	; 103
 342:	89 b9       	out	0x09, r24	; 9
 344:	08 95       	ret

00000346 <UART_Recive_Byte>:

uint8 UART_Recive_Byte(void) // return value void UART_Recive_Byte(uint8*); => by value
{
	uint8 data = 0  ; 
	
	while(GET_BIT(UCSRA , 7)==0);
 346:	5f 9b       	sbis	0x0b, 7	; 11
 348:	fe cf       	rjmp	.-4      	; 0x346 <UART_Recive_Byte>
	
	data = UDR ; 
 34a:	8c b1       	in	r24, 0x0c	; 12
	
	return data ; 
	
}
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
